{"ast":null,"code":"import jQuery from 'jquery';\n(function ($) {\n  window.NestedFormEvents = function () {\n    this.addFields = $.proxy(this.addFields, this);\n    this.removeFields = $.proxy(this.removeFields, this);\n  };\n  NestedFormEvents.prototype = {\n    addFields: function (e) {\n      // Setup\n      var link = e.currentTarget;\n      var assoc = $(link).data('association'); // Name of child\n      var blueprint = $('#' + $(link).data('blueprint-id'));\n      var content = blueprint.data('blueprint'); // Fields template\n\n      // Make the context correct by replacing <parents> with the generated ID\n      // of each of the parent objects\n      var context = ($(link).closest('.fields').closestChild('input, textarea, select').eq(0).attr('name') || '').replace(/\\[[a-z_]+\\]$/, '');\n\n      // If the parent has no inputs we need to strip off the last pair\n      var current = content.match(new RegExp('\\\\[([a-z_]+)\\\\]\\\\[new_' + assoc + '\\\\]'));\n      if (current) {\n        context = context.replace(new RegExp('\\\\[' + current[1] + '\\\\]\\\\[(new_)?\\\\d+\\\\]$'), '');\n      }\n\n      // context will be something like this for a brand new form:\n      // project[tasks_attributes][1255929127459][assignments_attributes][1255929128105]\n      // or for an edit form:\n      // project[tasks_attributes][0][assignments_attributes][1]\n      if (context) {\n        var parentNames = context.match(/[a-z_]+_attributes(?=\\]\\[(new_)?\\d+\\])/g) || [];\n        var parentIds = context.match(/[0-9]+/g) || [];\n        for (var i = 0; i < parentNames.length; i++) {\n          if (parentIds[i]) {\n            content = content.replace(new RegExp('(_' + parentNames[i] + ')_.+?_', 'g'), '$1_' + parentIds[i] + '_');\n            content = content.replace(new RegExp('(\\\\[' + parentNames[i] + '\\\\])\\\\[.+?\\\\]', 'g'), '$1[' + parentIds[i] + ']');\n          }\n        }\n      }\n\n      // Make a unique ID for the new child\n      var regexp = new RegExp('new_' + assoc, 'g');\n      var new_id = this.newId();\n      content = $.trim(content.replace(regexp, new_id));\n      var field = this.insertFields(content, assoc, link);\n      // bubble up event upto document (through form)\n      field.trigger({\n        type: 'nested:fieldAdded',\n        field: field\n      }).trigger({\n        type: 'nested:fieldAdded:' + assoc,\n        field: field\n      });\n      return false;\n    },\n    newId: function () {\n      return new Date().getTime();\n    },\n    insertFields: function (content, assoc, link) {\n      var target = $(link).data('target');\n      if (target) {\n        return $(content).appendTo($(target));\n      } else {\n        return $(content).insertBefore(link);\n      }\n    },\n    removeFields: function (e) {\n      var $link = $(e.currentTarget),\n        assoc = $link.data('association'); // Name of child to be removed\n\n      var hiddenField = $link.prev('input[type=hidden]');\n      hiddenField.val('1');\n      var field = $link.closest('.fields');\n      field.hide();\n      field.trigger({\n        type: 'nested:fieldRemoved',\n        field: field\n      }).trigger({\n        type: 'nested:fieldRemoved:' + assoc,\n        field: field\n      });\n      return false;\n    }\n  };\n  window.nestedFormEvents = new NestedFormEvents();\n  $(document).delegate('form a.add_nested_fields', 'click', nestedFormEvents.addFields).delegate('form a.remove_nested_fields', 'click', nestedFormEvents.removeFields);\n})(jQuery);\n\n// http://plugins.jquery.com/project/closestChild\n/*\n * Copyright 2011, Tobias Lindig\n *\n * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)\n * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\n *\n */\n(function ($) {\n  $.fn.closestChild = function (selector) {\n    // breadth first search for the first matched node\n    if (selector && selector != '') {\n      var queue = [];\n      queue.push(this);\n      while (queue.length > 0) {\n        var node = queue.shift();\n        var children = node.children();\n        for (var i = 0; i < children.length; ++i) {\n          var child = $(children[i]);\n          if (child.is(selector)) {\n            return child; //well, we found one\n          }\n          queue.push(child);\n        }\n      }\n    }\n    return $(); //nothing found\n  };\n})(jQuery);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}