{"ast":null,"code":"import jQuery from \"jquery\";\nimport \"jquery-ui/ui/widget.js\";\nimport \"jquery-ui/ui/widgets/autocomplete.js\";\nimport I18n from \"./i18n\";\n(function ($) {\n  \"use strict\";\n\n  $.widget(\"ra.filteringSelect\", {\n    options: {\n      createQuery: function (query) {\n        return {\n          query: query\n        };\n      },\n      minLength: 0,\n      searchDelay: 200,\n      remote_source: null,\n      source: null,\n      xhr: false\n    },\n    button: null,\n    input: null,\n    select: null,\n    filtering_select: null,\n    _create: function () {\n      this.filtering_select = this.element.siblings('[data-input-for=\"' + this.element.attr(\"id\") + '\"]');\n\n      // When using the browser back and forward buttons, it is possible that\n      // the autocomplete field will be cached which causes duplicate fields\n      // to be generated.\n      if (this.filtering_select.length > 0) {\n        this.input = this.filtering_select.children(\"input\");\n        this.button = this.filtering_select.children(\".input-group-btn\");\n      } else {\n        this.element.hide();\n        this.filtering_select = this._inputGroup(this.element.attr(\"id\"));\n        this.input = this._inputField();\n        this.button = this._buttonField();\n      }\n      this.clearOption = $('<span style=\"color: #888\"></span>').append('<i class=\"fas fa-times\"></i> ' + $(\"<span></span>\").text(I18n.t(\"clear\")).html());\n      this.noObjectsPlaceholder = $('<option disabled=\"disabled\" />').text(I18n.t(\"no_objects\"));\n      this._setOptionsSource();\n      this._initAutocomplete();\n      this._initKeyEvent();\n      this._overloadRenderItem();\n      this._autocompleteDropdownEvent(this.button);\n      return this.filtering_select.append(this.input).append(this.button).insertAfter(this.element);\n    },\n    _getResultSet: function (request, data, xhr) {\n      var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), \"i\");\n      var spannedContent = function (content) {\n        return $(\"<span>\").text(content).html();\n      };\n      var highlighter = function (label, word) {\n        if (word.length) {\n          return $.map(label.split(word), function (el) {\n            return spannedContent(el);\n          }).join($(\"<strong>\").text(word)[0].outerHTML);\n        } else {\n          return spannedContent(label);\n        }\n      };\n      var matches = $.map(data, function (el) {\n        var id = el.id || el.value;\n        var value = el.label || el.id;\n        // match regexp only for local requests, remote ones are already\n        // filtered, and label may not contain filtered term.\n        if (id && (xhr || matcher.test(el.label))) {\n          return {\n            html: highlighter(value, request.term),\n            value: value,\n            id: id\n          };\n        }\n      });\n      if (request.term.length === 0 && !this.input.attr(\"required\")) {\n        return [{\n          html: this.clearOption,\n          value: null,\n          id: null\n        }].concat(matches);\n      } else if (matches.length === 0) {\n        return [{\n          html: this.noObjectsPlaceholder,\n          value: null,\n          id: null\n        }];\n      } else {\n        return matches;\n      }\n    },\n    _getSourceFunction: function (source) {\n      var self = this;\n      var requestIndex = 0;\n      if ($.isArray(source)) {\n        return function (request, response) {\n          response(self._getResultSet(request, source, false));\n        };\n      } else if (typeof source === \"string\") {\n        return function (request, response) {\n          if (this.xhr) {\n            this.xhr.abort();\n          }\n          this.xhr = $.ajax({\n            url: source,\n            data: self.options.createQuery(request.term),\n            dataType: \"json\",\n            autocompleteRequest: ++requestIndex,\n            success: function (data, status) {\n              if (this.autocompleteRequest === requestIndex) {\n                response(self._getResultSet(request, data, true));\n              }\n            },\n            error: function () {\n              if (this.autocompleteRequest === requestIndex) {\n                response([]);\n              }\n            }\n          });\n        };\n      } else {\n        return source;\n      }\n    },\n    _setOptionsSource: function () {\n      if (this.options.xhr) {\n        this.options.source = this.options.remote_source;\n      } else {\n        this.options.source = this.element.children(\"option\").map(function () {\n          return {\n            label: $(this).text(),\n            value: this.value\n          };\n        }).toArray();\n      }\n    },\n    _buttonField: function () {\n      return $('<span class=\"input-group-btn\">' + '<label class=\"btn btn-info dropdown-toggle\" title=\"Show All Items\" role=\"button\">' + \"</label>\" + \"</span>\");\n    },\n    _autocompleteDropdownEvent: function (element) {\n      var self = this;\n      return element.click(function () {\n        // close if already visible\n        if (self.input.autocomplete(\"widget\").is(\":visible\")) {\n          self.input.autocomplete(\"close\");\n          return;\n        }\n\n        // pass empty string as value to search for, displaying all results\n        self.input.autocomplete(\"search\", \"\");\n        self.input.focus();\n      });\n    },\n    _inputField: function () {\n      var input;\n      var selected = this.element.children(\":selected\");\n      var value = selected.val() ? selected.text() : \"\";\n      input = $('<input type=\"text\">').val(value).addClass(\"form-control ra-filtering-select-input\").attr(\"style\", this.element.attr(\"style\")).show();\n      if (this.element.attr(\"placeholder\")) {\n        input.attr(\"placeholder\", this.element.attr(\"placeholder\"));\n      }\n      if (this.element.attr(\"required\")) {\n        input.attr(\"required\", this.element.attr(\"required\"));\n        this.element.attr(\"required\", false);\n      }\n      return input;\n    },\n    _inputGroup: function (inputFor) {\n      return $(\"<div>\").addClass(\"input-group filtering-select\").attr(\"data-input-for\", inputFor);\n    },\n    _initAutocomplete: function () {\n      var self = this;\n      return this.input.autocomplete({\n        delay: this.options.searchDelay,\n        minLength: this.options.minLength,\n        source: this._getSourceFunction(this.options.source),\n        select: function (event, ui) {\n          var option = self.element.find(`option[value=\"${CSS.escape(ui.item.id)}\"]`);\n          self.element.find(\"option[selected]\").attr(\"selected\", false);\n          if (option.length > 0) {\n            option.attr(\"selected\", \"selected\");\n          } else {\n            option = $(\"<option>\").attr(\"value\", ui.item.id).attr(\"selected\", true).text(ui.item.value);\n            self.element.append(option);\n          }\n          self.element.trigger(\"change\", ui.item.id);\n          self._trigger(\"selected\", event, {\n            item: option\n          });\n          $(self.element.parents(\".controls\")[0]).find(\".update\").removeClass(\"disabled\");\n        },\n        change: function (event, ui) {\n          if (ui.item) {\n            return;\n          }\n          var matcher = new RegExp(\"^\" + $.ui.autocomplete.escapeRegex($(this).val()) + \"$\", \"i\");\n          var valid = false;\n          self.element.children(\"option\").each(function () {\n            if ($(this).text().match(matcher)) {\n              valid = true;\n              return false;\n            }\n          });\n          if (valid || $(this).val() !== \"\") {\n            return;\n          }\n\n          // remove invalid value, as it didn't match anything\n          $(this).val(null);\n          self.element.html($('<option value=\"\" selected=\"selected\"></option>'));\n          self.input.data(\"ui-autocomplete\").term = \"\";\n          $(self.element.parents(\".controls\")[0]).find(\".update\").addClass(\"disabled\");\n          return false;\n        }\n      });\n    },\n    _initKeyEvent: function () {\n      var self = this;\n      return this.input.keyup(function () {\n        if ($(this).val().length) {\n          return;\n        }\n\n        /* Clear select options and trigger change if selected item is deleted */\n        return self.element.html($('<option value=\"\" selected=\"selected\"></option>')).trigger(\"change\");\n      });\n    },\n    _overloadRenderItem: function () {\n      this.input.data(\"ui-autocomplete\")._renderItem = function (ul, item) {\n        return $(\"<li></li>\").data(\"ui-autocomplete-item\", item).append($(\"<a></a>\").html(item.html || item.id)).appendTo(ul);\n      };\n    },\n    destroy: function () {\n      this.input.remove();\n      this.button.remove();\n      this.element.show();\n      this.filtering_select.remove();\n      $.Widget.prototype.destroy.call(this);\n    }\n  });\n})(jQuery);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}